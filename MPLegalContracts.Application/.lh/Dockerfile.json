{
    "sourceFile": "Dockerfile",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 57,
            "patches": [
                {
                    "date": 1714691754779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1714691812387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+# build stage\r\n+FROM node:lts-alpine as build-stage\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm install\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 80\r\n+EXPOSE 8080\r\n+EXPOSE 8081\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714691890108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+# build stage\r\n+FROM node:lts-alpine as build-stage\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm install\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 80\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692005060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+# build stage\r\n+FROM node:lts-alpine as build-stage\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm install\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+COPY nginx.conf /etc/nginx/conf.d/default.conf\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692049799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,48 +8,7 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx.conf /etc/nginx/conf.d/default.conf\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm install\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 80\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm install\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 80\r\n-EXPOSE 8080\r\n-EXPOSE 8081\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm install\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 80\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692143944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n+# Use the official Node.js LTS image from Docker Hub\r\n+FROM node:lts-alpine\r\n+\r\n+# Set the working directory\r\n WORKDIR /app\r\n+\r\n+# Copy package.json and package-lock.json\r\n COPY package*.json ./\r\n+\r\n+# Install dependencies\r\n RUN npm install\r\n+\r\n\\ No newline at end of file\n+# Copy the rest of your app's source code\r\n COPY . .\r\n-RUN npm run build\r\n \r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n+# Expose port 8080 for the Vue.js server\r\n+EXPOSE 8080\r\n+\r\n+# Start the Vue.js server\r\n+CMD [ \"npm\", \"run\", \"serve\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692168508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,5 +16,5 @@\n # Expose port 8080 for the Vue.js server\r\n EXPOSE 8080\r\n \r\n # Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"serve\" ]\n\\ No newline at end of file\n+CMD [ \"npm\", \"run\", \"preview\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692182630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,5 +16,5 @@\n # Expose port 8080 for the Vue.js server\r\n EXPOSE 8080\r\n \r\n # Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"preview\" ]\n\\ No newline at end of file\n+CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692269074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+# Use the official Node.js LTS image from Docker Hub\r\n+FROM node:lts\r\n+\r\n+# Set the working directory\r\n+WORKDIR /app\r\n+\r\n+# Copy package.json and package-lock.json\r\n+COPY package*.json ./\r\n+\r\n+# Install dependencies\r\n+RUN npm install\r\n+\r\n+# Copy the rest of your app's source code\r\n+COPY . .\r\n+\r\n+# Expose port 8080 for the Vue.js server\r\n+EXPOSE 8080\r\n+\r\n+# Start the Vue.js server\r\n+CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692332835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n # Use the official Node.js LTS image from Docker Hub\r\n-FROM node:lts\r\n+FROM node:18-alpine\r\n \r\n # Set the working directory\r\n WORKDIR /app\r\n \r\n@@ -16,25 +16,5 @@\n # Expose port 8080 for the Vue.js server\r\n EXPOSE 8080\r\n \r\n # Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"dev\" ]\n-# Use the official Node.js LTS image from Docker Hub\r\n-FROM node:lts-alpine\r\n-\r\n-# Set the working directory\r\n-WORKDIR /app\r\n-\r\n-# Copy package.json and package-lock.json\r\n-COPY package*.json ./\r\n-\r\n-# Install dependencies\r\n-RUN npm install\r\n-\r\n-# Copy the rest of your app's source code\r\n-COPY . .\r\n-\r\n-# Expose port 8080 for the Vue.js server\r\n-EXPOSE 8080\r\n-\r\n-# Start the Vue.js server\r\n CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692440683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n # Use the official Node.js LTS image from Docker Hub\r\n-FROM node:18-alpine\r\n+FROM node:20-alpine\r\n \r\n # Set the working directory\r\n WORKDIR /app\r\n \r\n"
                },
                {
                    "date": 1714692449766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n # Set the working directory\r\n WORKDIR /app\r\n \r\n # Copy package.json and package-lock.json\r\n-COPY package*.json ./\r\n+COPY package.json ./\r\n \r\n # Install dependencies\r\n RUN npm install\r\n \r\n"
                },
                {
                    "date": 1714692512255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+# Use the official Node.js LTS image from Docker Hub\r\n+FROM node:20-alpine\r\n+\r\n+# Set the working directory\r\n+WORKDIR /app\r\n+\r\n+# Copy package.json and package-lock.json\r\n+COPY package*.json ./\r\n+\r\n+# Install dependencies\r\n+RUN npm install\r\n+\r\n+# Copy the rest of your app's source code\r\n+COPY . .\r\n+\r\n+# Expose port 8080 for the Vue.js server\r\n+EXPOSE 8080\r\n+\r\n+# Start the Vue.js server\r\n+CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692721639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n # Use the official Node.js LTS image from Docker Hub\r\n-FROM node:20-alpine\r\n+FROM node:18-alpine\r\n \r\n # Set the working directory\r\n WORKDIR /app\r\n \r\n@@ -16,25 +16,5 @@\n # Expose port 8080 for the Vue.js server\r\n EXPOSE 8080\r\n \r\n # Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"dev\" ]\n-# Use the official Node.js LTS image from Docker Hub\r\n-FROM node:20-alpine\r\n-\r\n-# Set the working directory\r\n-WORKDIR /app\r\n-\r\n-# Copy package.json and package-lock.json\r\n-COPY package.json ./\r\n-\r\n-# Install dependencies\r\n-RUN npm install\r\n-\r\n-# Copy the rest of your app's source code\r\n-COPY . .\r\n-\r\n-# Expose port 8080 for the Vue.js server\r\n-EXPOSE 8080\r\n-\r\n-# Start the Vue.js server\r\n CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692812506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+# Use the official Node.js LTS image from Docker Hub\r\n+FROM node:18-alpine\r\n+\r\n+# Set the working directory\r\n+WORKDIR /app\r\n+\r\n+# Copy package.json and package-lock.json\r\n+COPY package*.json ./\r\n+\r\n+# Install dependencies\r\n+RUN npm install\r\n+\r\n+# Copy the rest of your app's source code\r\n+COPY . .\r\n+\r\n+# Expose port 8080 for the Vue.js server\r\n+EXPOSE 8080\r\n+\r\n+# Start the Vue.js server\r\n+CMD [ \"npm\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714692887413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,13 @@\n-# Use the official Node.js LTS image from Docker Hub\r\n-FROM node:18-alpine\r\n-\r\n-# Set the working directory\r\n+# build stage\r\n+FROM node:lts-alpine as build-stage\r\n WORKDIR /app\r\n-\r\n-# Copy package.json and package-lock.json\r\n COPY package*.json ./\r\n-\r\n-# Install dependencies\r\n RUN npm install\r\n-\r\n-# Copy the rest of your app's source code\r\n COPY . .\r\n+RUN npm run build\r\n \r\n-# Expose port 8080 for the Vue.js server\r\n-EXPOSE 8080\r\n-\r\n-# Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"dev\" ]\n-# Use the official Node.js LTS image from Docker Hub\r\n-FROM node:18-alpine\r\n-\r\n-# Set the working directory\r\n-WORKDIR /app\r\n-\r\n-# Copy package.json and package-lock.json\r\n-COPY package*.json ./\r\n-\r\n-# Install dependencies\r\n-RUN npm install\r\n-\r\n-# Copy the rest of your app's source code\r\n-COPY . .\r\n-\r\n-# Expose port 8080 for the Vue.js server\r\n-EXPOSE 8080\r\n\\ No newline at end of file\n-\r\n-# Start the Vue.js server\r\n-CMD [ \"npm\", \"run\", \"dev\" ]\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693012378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,21 @@\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n+FROM node:16.1.0-buster AS builder\r\n+\r\n WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm install\r\n+\r\n+COPY package.json /app/\r\n+\r\n+# with Yarn\r\n+COPY yarn.lock /app/\r\n+RUN yarn install --frozen-lockfile\r\n\\ No newline at end of file\n+\r\n+# or with NPM\r\n+#COPY package-lock.json /home/app/\r\n+#RUN npm ci\r\n+\r\n COPY . .\r\n+\r\n RUN npm run build\r\n \r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx.default.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693105171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+FROM node:16.1.0-buster AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+\r\n+# with Yarn\r\n+COPY yarn.lock /app/\r\n+RUN yarn install --frozen-lockfile\r\n+\r\n+# or with NPM\r\n+#COPY package-lock.json /home/app/\r\n+#RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693181986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+FROM node:22-slim AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+\r\n+RUN npm install\r\n+\r\n+# or with NPM\r\n+#COPY package-lock.json /home/app/\r\n+#RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693194927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+FROM node:22-slim AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+\r\n+COPY package-lock.json /home/app/\r\n+RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693201637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+FROM node:22-slim AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+\r\n+COPY package-lock.json /home/app/\r\n+RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:lts-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693212101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,84 +10,7 @@\n COPY . .\r\n \r\n RUN npm run build\r\n \r\n-FROM nginx:lts-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:22-slim AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-COPY package-lock.json /home/app/\r\n-RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n FROM nginx:1.19.10-alpine\r\n COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:22-slim AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-RUN npm install\r\n-\r\n-# or with NPM\r\n-#COPY package-lock.json /home/app/\r\n-#RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:16.1.0-buster AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-# with Yarn\r\n-COPY yarn.lock /app/\r\n-RUN yarn install --frozen-lockfile\r\n-\r\n-# or with NPM\r\n-#COPY package-lock.json /home/app/\r\n-#RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:16.1.0-buster AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-# with Yarn\r\n-COPY yarn.lock /app/\r\n-RUN yarn install --frozen-lockfile\r\n-\r\n-# or with NPM\r\n-#COPY package-lock.json /home/app/\r\n-#RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx.default.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693256116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+FROM node:22-slim AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+\r\n+COPY package-lock.json /home/app/\r\n+RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693272877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+FROM node:22-slim AS builder\r\n+\r\n+WORKDIR /app\r\n+\r\n+COPY package.json /app/\r\n+COPY package-lock.json /app/\r\n+RUN npm ci\r\n+\r\n+COPY . .\r\n+\r\n+RUN npm run build\r\n+\r\n+FROM nginx:1.19.10-alpine\r\n+COPY --from=builder /app/build /usr/share/nginx/html\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693291369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,39 +9,9 @@\n COPY . .\r\n \r\n RUN npm run build\r\n \r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:22-slim AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-COPY package-lock.json /home/app/\r\n-RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n-FROM node:22-slim AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-\r\n-COPY package-lock.json /home/app/\r\n-RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-FROM nginx:1.19.10-alpine\r\n-COPY --from=builder /app/build /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\n\\ No newline at end of file\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693299855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+FROM node:22-slim AS builder\r\n+WORKDIR /app\r\n+COPY package.json /app/\r\n+COPY package-lock.json /app/\r\n+RUN npm ci\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693351028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+# build stage\r\n+FROM node:22-slim AS builder\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm ci\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE \r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n+\r\n"
                },
                {
                    "date": 1714693360285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+# build stage\r\n+FROM node:22-slim AS builder\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm ci\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n+\r\n"
                },
                {
                    "date": 1714693371162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+# build stage\r\n+FROM node:22-slim AS builder\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm ci\r\n+COPY . .\r\n+RUN npm run build\r\n+\r\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n+\r\n"
                },
                {
                    "date": 1714693455716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM node:lts-buster\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm i install\r\n+RUN npm ci\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+EXPOSE 80\r\n+EXPOSE 443\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714693521046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,15 @@\n WORKDIR /usr/src/app\r\n  \r\n # Copy dependency definitions\r\n COPY package.json ./package.json\r\n-COPY package-lock.json ./package-lock.json\r\n+# COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n RUN npm set progress=false \\\r\n     && npm config set depth 0 \\\r\n     && npm i install\r\n-RUN npm ci\r\n+# RUN npm ci\r\n  \r\n # Get all the code needed to run the app\r\n COPY . .\r\n  \r\n@@ -23,76 +23,4 @@\n  \r\n # Serve the app\r\n CMD [\"npm\", \"run\", \"dev\"]\r\n \r\n-# build stage\r\n-FROM node:22-slim AS builder\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm ci\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n-\r\n-# build stage\r\n-FROM node:22-slim AS builder\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm ci\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n-\r\n-# build stage\r\n-FROM node:22-slim AS builder\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm ci\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE \r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n-\r\n-FROM node:22-slim AS builder\r\n-WORKDIR /app\r\n-COPY package.json /app/\r\n-COPY package-lock.json /app/\r\n-RUN npm ci\r\n-COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n-FROM node:22-slim AS builder\r\n-\r\n-WORKDIR /app\r\n-\r\n-COPY package.json /app/\r\n-COPY package-lock.json /app/\r\n-RUN npm ci\r\n-\r\n-COPY . .\r\n-\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714693651322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n # Create image based on the official Node image from dockerhub\r\n-FROM node:lts-buster\r\n+FROM --platform=linux/amd64 node:18\r\n+RUN npm install --loglevel verbose\r\n  \r\n # Create app directory\r\n WORKDIR /usr/src/app\r\n  \r\n"
                },
                {
                    "date": 1714693656414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM --platform=linux/amd64 node:18\r\n+RUN \r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+# COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm install --loglevel verbose\r\n+# RUN npm ci\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+EXPOSE 80\r\n+EXPOSE 443\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714693928870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM --platform=linux/amd64 node:18-alpine\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+# COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm install --loglevel verbose\r\n+# RUN npm ci\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+EXPOSE 80\r\n+EXPOSE 443\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714693948734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM node:18-alpine\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+# COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm install --loglevel verbose\r\n+# RUN npm ci\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+EXPOSE 80\r\n+EXPOSE 443\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714694056001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n COPY package.json ./package.json\r\n # COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n+RUN npm config set registry https://registry.npmjs.org/\r\n RUN npm set progress=false \\\r\n     && npm config set depth 0 \\\r\n     && npm install --loglevel verbose\r\n # RUN npm ci\r\n@@ -23,84 +24,4 @@\n  \r\n # Serve the app\r\n CMD [\"npm\", \"run\", \"dev\"]\r\n \r\n-# Create image based on the official Node image from dockerhub\r\n-FROM --platform=linux/amd64 node:18-alpine\r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm install --loglevel verbose\r\n-# RUN npm ci\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n-\r\n-# Create image based on the official Node image from dockerhub\r\n-FROM --platform=linux/amd64 node:18\r\n-RUN \r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm install --loglevel verbose\r\n-# RUN npm ci\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n-\r\n-# Create image based on the official Node image from dockerhub\r\n-FROM --platform=linux/amd64 node:18\r\n-RUN npm install --loglevel verbose\r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm i install\r\n-# RUN npm ci\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n-\r\n"
                },
                {
                    "date": 1714694074932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM node:18-alpine\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+# COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm config set registry https://registry.npmjs.org/\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm install --ignore-scripts --unsafe-perm --loglevel verbose\r\n+# RUN npm ci\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+EXPOSE 80\r\n+EXPOSE 443\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714694268746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,16 @@\n WORKDIR /usr/src/app\r\n  \r\n # Copy dependency definitions\r\n COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n+COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n RUN npm config set registry https://registry.npmjs.org/\r\n RUN npm set progress=false \\\r\n     && npm config set depth 0 \\\r\n     && npm install --ignore-scripts --unsafe-perm --loglevel verbose\r\n-# RUN npm ci\r\n+RUN npm ci\r\n  \r\n # Get all the code needed to run the app\r\n COPY . .\r\n  \r\n@@ -24,31 +24,4 @@\n  \r\n # Serve the app\r\n CMD [\"npm\", \"run\", \"dev\"]\r\n \r\n-# Create image based on the official Node image from dockerhub\r\n-FROM node:18-alpine\r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm config set registry https://registry.npmjs.org/\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm install --loglevel verbose\r\n-# RUN npm ci\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n-\r\n"
                },
                {
                    "date": 1714694385307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+# use the official Bun image\r\n+# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n+FROM oven/bun:1 as base\r\n+WORKDIR /usr/src/app\r\n+\r\n+# install dependencies into temp directory\r\n+# this will cache them and speed up future builds\r\n+FROM base AS install\r\n+RUN mkdir -p /temp/dev\r\n+COPY package.json bun.lockb /temp/dev/\r\n+RUN cd /temp/dev && bun install --frozen-lockfile\r\n+\r\n+# install with --production (exclude devDependencies)\r\n+RUN mkdir -p /temp/prod\r\n+COPY package.json bun.lockb /temp/prod/\r\n+RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n+\r\n+# copy node_modules from temp directory\r\n+# then copy all (non-ignored) project files into the image\r\n+FROM base AS prerelease\r\n+COPY --from=install /temp/dev/node_modules node_modules\r\n+COPY . .\r\n+\r\n+# [optional] tests & build\r\n+# ENV NODE_ENV=production\r\n+# RUN bun test\r\n+# RUN bun run build\r\n+\r\n+# copy production dependencies and source code into final image\r\n+FROM base AS release\r\n+COPY --from=install /temp/prod/node_modules node_modules\r\n+COPY --from=prerelease /usr/src/app/index.ts .\r\n+COPY --from=prerelease /usr/src/app/package.json .\r\n+\r\n+# run the app\r\n+USER bun\r\n+EXPOSE 3000/tcp\r\n+ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694424292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+# use the official Bun image\r\n+# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n+FROM oven/bun:1 as base\r\n+WORKDIR /usr/src/app\r\n+\r\n+# install dependencies into temp directory\r\n+# this will cache them and speed up future builds\r\n+FROM base AS install\r\n+RUN mkdir -p /temp/dev\r\n+COPY package.json bun.lockb /temp/dev/\r\n+RUN cd /temp/dev && bun install --frozen-lockfile\r\n+\r\n+# install with --production (exclude devDependencies)\r\n+RUN mkdir -p /temp/prod\r\n+COPY package.json bun.lockb /temp/prod/\r\n+RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n+\r\n+# copy node_modules from temp directory\r\n+# then copy all (non-ignored) project files into the image\r\n+FROM base AS prerelease\r\n+COPY --from=install /temp/dev/node_modules node_modules\r\n+COPY . .\r\n+\r\n+# [optional] tests & build\r\n+# ENV NODE_ENV=production\r\n+# RUN bun test\r\n+# RUN bun run build\r\n+\r\n+# copy production dependencies and source code into final image\r\n+FROM base AS release\r\n+COPY --from=install /temp/prod/node_modules node_modules\r\n+COPY --from=prerelease /usr/src/app/package.json .\r\n+\r\n+# run the app\r\n+USER bun\r\n+EXPOSE 3000/tcp\r\n+ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694502625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \r\n # [optional] tests & build\r\n # ENV NODE_ENV=production\r\n # RUN bun test\r\n-# RUN bun run build\r\n+RUN bun run build\r\n \r\n # copy production dependencies and source code into final image\r\n FROM base AS release\r\n COPY --from=install /temp/prod/node_modules node_modules\r\n@@ -33,69 +33,5 @@\n \r\n # run the app\r\n USER bun\r\n EXPOSE 3000/tcp\r\n-ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n-# use the official Bun image\r\n-# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n-FROM oven/bun:1 as base\r\n-WORKDIR /usr/src/app\r\n-\r\n-# install dependencies into temp directory\r\n-# this will cache them and speed up future builds\r\n-FROM base AS install\r\n-RUN mkdir -p /temp/dev\r\n-COPY package.json bun.lockb /temp/dev/\r\n-RUN cd /temp/dev && bun install --frozen-lockfile\r\n-\r\n-# install with --production (exclude devDependencies)\r\n-RUN mkdir -p /temp/prod\r\n-COPY package.json bun.lockb /temp/prod/\r\n-RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n-\r\n-# copy node_modules from temp directory\r\n-# then copy all (non-ignored) project files into the image\r\n-FROM base AS prerelease\r\n-COPY --from=install /temp/dev/node_modules node_modules\r\n-COPY . .\r\n-\r\n-# [optional] tests & build\r\n-# ENV NODE_ENV=production\r\n-# RUN bun test\r\n-# RUN bun run build\r\n-\r\n-# copy production dependencies and source code into final image\r\n-FROM base AS release\r\n-COPY --from=install /temp/prod/node_modules node_modules\r\n-COPY --from=prerelease /usr/src/app/index.ts .\r\n-COPY --from=prerelease /usr/src/app/package.json .\r\n-\r\n-# run the app\r\n-USER bun\r\n-EXPOSE 3000/tcp\r\n-ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n-# Create image based on the official Node image from dockerhub\r\n-FROM node:18-alpine\r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm config set registry https://registry.npmjs.org/\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm install --ignore-scripts --unsafe-perm --loglevel verbose\r\n-RUN npm ci\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\n\\ No newline at end of file\n+ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694516513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+# use the official Bun image\r\n+# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n+FROM oven/bun:1 as base\r\n+WORKDIR /usr/src/app\r\n+\r\n+# install dependencies into temp directory\r\n+# this will cache them and speed up future builds\r\n+FROM base AS install\r\n+RUN mkdir -p /temp/dev\r\n+COPY package.json bun.lockb /temp/dev/\r\n+RUN cd /temp/dev && bun install --frozen-lockfile\r\n+\r\n+# install with --production (exclude devDependencies)\r\n+RUN mkdir -p /temp/prod\r\n+COPY package.json bun.lockb /temp/prod/\r\n+RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n+\r\n+# copy node_modules from temp directory\r\n+# then copy all (non-ignored) project files into the image\r\n+FROM base AS prerelease\r\n+COPY --from=install /temp/dev/node_modules node_modules\r\n+COPY . .\r\n+\r\n+# [optional] tests & build\r\n+# ENV NODE_ENV=production\r\n+# RUN bun test\r\n+# RUN bun run build\r\n+\r\n+# copy production dependencies and source code into final image\r\n+FROM base AS release\r\n+COPY --from=install /temp/prod/node_modules node_modules\r\n+COPY --from=prerelease /usr/src/app/package.json .\r\n+\r\n+# run the app\r\n+USER bun\r\n+EXPOSE 3000/tcp\r\n+ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694536086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+# use the official Bun image\r\n+# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n+FROM oven/bun:1 as base\r\n+WORKDIR /usr/src/app\r\n+\r\n+# install dependencies into temp directory\r\n+# this will cache them and speed up future builds\r\n+FROM base AS install\r\n+RUN mkdir -p /temp/dev\r\n+COPY package.json bun.lockb /temp/dev/\r\n+RUN cd /temp/dev && bun install --frozen-lockfile\r\n+\r\n+# install with --production (exclude devDependencies)\r\n+RUN mkdir -p /temp/prod\r\n+COPY package.json bun.lockb /temp/prod/\r\n+RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n+\r\n+# copy node_modules from temp directory\r\n+# then copy all (non-ignored) project files into the image\r\n+FROM base AS prerelease\r\n+COPY --from=install /temp/dev/node_modules node_modules\r\n+COPY . .\r\n+\r\n+# [optional] tests & build\r\n+# ENV NODE_ENV=production\r\n+# RUN bun test\r\n+# RUN bun run build\r\n+\r\n+# copy production dependencies and source code into final image\r\n+FROM base AS release\r\n+RUN ls\r\n+COPY --from=install /temp/prod/node_modules node_modules\r\n+COPY --from=prerelease /usr/src/app/package.json .\r\n+\r\n+# run the app\r\n+USER bun\r\n+EXPOSE 3000/tcp\r\n+ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694599496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+FROM oven/bun\r\n+\r\n+# Copy the lock and package file\r\n+COPY bun.lockb . \r\n+COPY package.json . \r\n+\r\n+# Install dependencies\r\n+RUN bun install --frozen-lockfile\r\n+\r\n+# Copy your source code\r\n+# If only files in the src folder changed, this is the only step that gets executed!\r\n+COPY src ./src \r\n+\r\n+CMD [\"bun\", \"run\", \"dev\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694703853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,126 +1,13 @@\n-FROM oven/bun\r\n-\r\n-# Copy the lock and package file\r\n-COPY bun.lockb . \r\n-COPY package.json . \r\n-\r\n-# Install dependencies\r\n-RUN bun install --frozen-lockfile\r\n-\r\n-# Copy your source code\r\n-# If only files in the src folder changed, this is the only step that gets executed!\r\n-COPY src ./src \r\n-\r\n-CMD [\"bun\", \"run\", \"dev\"]\n-# use the official Bun image\r\n-# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n-FROM oven/bun:1 as base\r\n-WORKDIR /usr/src/app\r\n-\r\n-# install dependencies into temp directory\r\n-# this will cache them and speed up future builds\r\n-FROM base AS install\r\n-RUN mkdir -p /temp/dev\r\n-COPY package.json bun.lockb /temp/dev/\r\n-RUN cd /temp/dev && bun install --frozen-lockfile\r\n-\r\n-# install with --production (exclude devDependencies)\r\n-RUN mkdir -p /temp/prod\r\n-COPY package.json bun.lockb /temp/prod/\r\n-RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n-\r\n-# copy node_modules from temp directory\r\n-# then copy all (non-ignored) project files into the image\r\n-FROM base AS prerelease\r\n-COPY --from=install /temp/dev/node_modules node_modules\r\n+# build stage\r\n+FROM node:lts-alpine as build-stage\r\n+WORKDIR /app\r\n+COPY package*.json ./\r\n+RUN npm install\r\n COPY . .\r\n+RUN npm run build\r\n \r\n-# [optional] tests & build\r\n-# ENV NODE_ENV=production\r\n-# RUN bun test\r\n-# RUN bun run build\r\n-\r\n-# copy production dependencies and source code into final image\r\n-FROM base AS release\r\n-RUN ls\r\n-COPY --from=install /temp/prod/node_modules node_modules\r\n-COPY --from=prerelease /usr/src/app/package.json .\r\n-\r\n-# run the app\r\n-USER bun\r\n-EXPOSE 3000/tcp\r\n-ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n-# use the official Bun image\r\n-# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n-FROM oven/bun:1 as base\r\n-WORKDIR /usr/src/app\r\n-\r\n-# install dependencies into temp directory\r\n-# this will cache them and speed up future builds\r\n-FROM base AS install\r\n-RUN mkdir -p /temp/dev\r\n-COPY package.json bun.lockb /temp/dev/\r\n-RUN cd /temp/dev && bun install --frozen-lockfile\r\n-\r\n-# install with --production (exclude devDependencies)\r\n-RUN mkdir -p /temp/prod\r\n-COPY package.json bun.lockb /temp/prod/\r\n-RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n-\r\n-# copy node_modules from temp directory\r\n-# then copy all (non-ignored) project files into the image\r\n-FROM base AS prerelease\r\n-COPY --from=install /temp/dev/node_modules node_modules\r\n-COPY . .\r\n-\r\n-# [optional] tests & build\r\n-# ENV NODE_ENV=production\r\n-# RUN bun test\r\n-# RUN bun run build\r\n-\r\n-# copy production dependencies and source code into final image\r\n-FROM base AS release\r\n-COPY --from=install /temp/prod/node_modules node_modules\r\n-COPY --from=prerelease /usr/src/app/package.json .\r\n-\r\n-# run the app\r\n-USER bun\r\n-EXPOSE 3000/tcp\r\n-ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n-# use the official Bun image\r\n-# see all versions at https://hub.docker.com/r/oven/bun/tags\r\n-FROM oven/bun:1 as base\r\n-WORKDIR /usr/src/app\r\n-\r\n-# install dependencies into temp directory\r\n-# this will cache them and speed up future builds\r\n-FROM base AS install\r\n-RUN mkdir -p /temp/dev\r\n-COPY package.json bun.lockb /temp/dev/\r\n-RUN cd /temp/dev && bun install --frozen-lockfile\r\n-\r\n-# install with --production (exclude devDependencies)\r\n-RUN mkdir -p /temp/prod\r\n-COPY package.json bun.lockb /temp/prod/\r\n-RUN cd /temp/prod && bun install --frozen-lockfile --production\r\n-\r\n-# copy node_modules from temp directory\r\n-# then copy all (non-ignored) project files into the image\r\n-FROM base AS prerelease\r\n-COPY --from=install /temp/dev/node_modules node_modules\r\n-COPY . .\r\n-\r\n-# [optional] tests & build\r\n-# ENV NODE_ENV=production\r\n-# RUN bun test\r\n-RUN bun run build\r\n-\r\n-# copy production dependencies and source code into final image\r\n-FROM base AS release\r\n-COPY --from=install /temp/prod/node_modules node_modules\r\n\\ No newline at end of file\n-COPY --from=prerelease /usr/src/app/package.json .\r\n-\r\n-# run the app\r\n-USER bun\r\n-EXPOSE 3000/tcp\r\n-ENTRYPOINT [ \"bun\", \"run\", \"dev\" ]\n+# production stage\r\n+FROM nginx:stable-alpine as production-stage\r\n+COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n+EXPOSE 443\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714694891501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,6 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 443\r\n+EXPOSE 80\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695183475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,8 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-EXPOSE 80\r\n+COPY nginx.conf /etc/nginx/conf.d/default.conf\r\n+COPY ssl-certs/ /etc/nginx/ssl-certs/\r\n+EXPOSE 443\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695214031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx.conf /etc/nginx/conf.d/default.conf\r\n-COPY ssl-certs/ /etc/nginx/ssl-certs/\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n+COPY nginx_config/ssl-certs/ /etc/nginx/ssl-certs/\r\n EXPOSE 443\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695268782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n-COPY nginx_config/ssl-certs/ /etc/nginx/ssl-certs/\r\n+COPY nginx-config/nginx.conf /etc/nginx/conf.d/default.conf\r\n+COPY nginx-config/ssl-certs/ /etc/nginx/ssl-certs/\r\n EXPOSE 443\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695304895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n \r\n # production stage\r\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx-config/nginx.conf /etc/nginx/conf.d/default.conf\r\n-COPY nginx-config/ssl-certs/ /etc/nginx/ssl-certs/\r\n+COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n+COPY nginx_config/ssl_certs/ /etc/nginx/ssl-certs/\r\n EXPOSE 443\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695572682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,6 +10,7 @@\n FROM nginx:stable-alpine as production-stage\r\n COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n COPY nginx_config/ssl_certs/ /etc/nginx/ssl-certs/\r\n+EXPOSE 80\r\n EXPOSE 443\r\n CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714695602928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,27 @@\n-# build stage\r\n-FROM node:lts-alpine as build-stage\r\n-WORKDIR /app\r\n-COPY package*.json ./\r\n-RUN npm install\r\n+# Create image based on the official Node image from dockerhub\r\n+FROM node:18-alpine\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+# COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n\\ No newline at end of file\n+RUN npm config set registry https://registry.npmjs.org/\r\n+RUN npm set progress=false \\\r\n+    && npm config set depth 0 \\\r\n+    && npm install --ignore-scripts --unsafe-perm --loglevel verbose\r\n+RUN npm run build\r\n+ \r\n+# Get all the code needed to run the app\r\n COPY . .\r\n-RUN npm run build\r\n-\r\n-# production stage\r\n-FROM nginx:stable-alpine as production-stage\r\n-COPY --from=build-stage /app/dist /usr/share/nginx/html\r\n-COPY nginx_config/nginx.conf /etc/nginx/conf.d/default.conf\r\n-COPY nginx_config/ssl_certs/ /etc/nginx/ssl-certs/\r\n+ \r\n+# Expose the port the app runs in\r\n EXPOSE 80\r\n EXPOSE 443\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"preview\"]\r\n+\r\n"
                },
                {
                    "date": 1714695649650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,13 @@\n WORKDIR /usr/src/app\r\n  \r\n # Copy dependency definitions\r\n COPY package.json ./package.json\r\n-# COPY package-lock.json ./package-lock.json\r\n+COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n RUN npm config set registry https://registry.npmjs.org/\r\n-RUN npm set progress=false \\\r\n-    && npm config set depth 0 \\\r\n-    && npm install --ignore-scripts --unsafe-perm --loglevel verbose\r\n+RUN npm npm install --loglevel verbose\r\n RUN npm run build\r\n  \r\n # Get all the code needed to run the app\r\n COPY . .\r\n@@ -22,5 +20,6 @@\n EXPOSE 80\r\n EXPOSE 443\r\n  \r\n # Serve the app\r\n-CMD [\"npm\", \"run\", \"preview\"]\n\\ No newline at end of file\n+CMD [\"npm\", \"run\", \"preview\"]\r\n+\r\n"
                },
                {
                    "date": 1714695666282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n RUN npm config set registry https://registry.npmjs.org/\r\n-RUN npm npm install --loglevel verbose\r\n+RUN npm install --loglevel verbose\r\n RUN npm run build\r\n  \r\n # Get all the code needed to run the app\r\n COPY . .\r\n"
                },
                {
                    "date": 1714695768366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,9 @@\n COPY package.json ./package.json\r\n COPY package-lock.json ./package-lock.json\r\n  \r\n # Install dependencies\r\n-RUN npm config set registry https://registry.npmjs.org/\r\n RUN npm install --loglevel verbose\r\n-RUN npm run build\r\n  \r\n # Get all the code needed to run the app\r\n COPY . .\r\n  \r\n@@ -20,6 +18,6 @@\n EXPOSE 80\r\n EXPOSE 443\r\n  \r\n # Serve the app\r\n-CMD [\"npm\", \"run\", \"preview\"]\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n \r\n"
                },
                {
                    "date": 1714695854167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+# Create image based on the official Node image from dockerhub\r\n+FROM node:18-alpine\r\n+ \r\n+# Create app directory\r\n+WORKDIR /usr/src/app\r\n+ \r\n+# Copy dependency definitions\r\n+COPY package.json ./package.json\r\n+COPY package-lock.json ./package-lock.json\r\n+ \r\n+# Install dependencies\r\n+RUN npm install --loglevel verbose\r\n+ \r\n+# Get all the code needed to run the app\r\n+COPY . .\r\n+ \r\n+# Expose the port the app runs in\r\n+ \r\n+# Serve the app\r\n+CMD [\"npm\", \"run\", \"dev\"]\r\n+\r\n"
                },
                {
                    "date": 1714695990547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,14 @@\n-# Create image based on the official Node image from dockerhub\r\n-FROM node:18-alpine\r\n- \r\n-# Create app directory\r\n+ARG NODE_VERSION=18.0.0\r\n+\r\n+FROM node:${NODE_VERSION}-alpine as base\r\n WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm install --loglevel verbose\r\n- \r\n-# Get all the code needed to run the app\r\n-COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n+EXPOSE 3000\r\n \r\n-# Create image based on the official Node image from dockerhub\r\n-FROM node:18-alpine\r\n- \r\n-# Create app directory\r\n-WORKDIR /usr/src/app\r\n- \r\n-# Copy dependency definitions\r\n-COPY package.json ./package.json\r\n-COPY package-lock.json ./package-lock.json\r\n- \r\n-# Install dependencies\r\n-RUN npm install --loglevel verbose\r\n- \r\n-# Get all the code needed to run the app\r\n+FROM base as dev\r\n+RUN --mount=type=bind,source=package.json,target=package.json \\\r\n+    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\r\n+    --mount=type=cache,target=/root/.npm \\\r\n+    npm ci --include=dev\r\n+USER node\r\n COPY . .\r\n- \r\n-# Expose the port the app runs in\r\n-EXPOSE 80\r\n-EXPOSE 443\r\n- \r\n-# Serve the app\r\n-CMD [\"npm\", \"run\", \"dev\"]\r\n-\r\n+CMD npm run dev\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714696124154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,5 +10,14 @@\n     --mount=type=cache,target=/root/.npm \\\r\n     npm ci --include=dev\r\n USER node\r\n COPY . .\r\n-CMD npm run dev\n\\ No newline at end of file\n+CMD npm run dev\r\n+\r\n+FROM base as prod\r\n+RUN --mount=type=bind,source=package.json,target=package.json \\\r\n+    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\r\n+    --mount=type=cache,target=/root/.npm \\\r\n+    npm ci --omit=dev\r\n+USER node\r\n+COPY . .\r\n+CMD node src/index.js\n\\ No newline at end of file\n"
                }
            ],
            "date": 1714691754779,
            "name": "Commit-0",
            "content": "# build stage\r\nFROM node:lts-alpine as build-stage\r\nWORKDIR /app\r\nCOPY package*.json ./\r\nRUN npm install\r\nCOPY . .\r\nRUN npm run build\r\n\r\n# production stage\r\nFROM nginx:stable-alpine as production-stage\r\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\r\nEXPOSE 80\r\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"
        }
    ]
}